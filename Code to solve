board = [
    [0,0,0,9,0,0,0,6,1],
    [0,0,0,8,0,0,3,0,0],
    [0,6,0,0,0,7,0,0,0],
    [0,8,0,3,5,0,0,0,0],
    [0,0,5,0,0,0,0,7,6],
    [0,0,0,0,0,0,4,0,0],
    [0,4,0,1,0,0,0,3,0],
    [1,3,0,0,4,0,0,0,8],
    [6,0,0,0,0,0,2,0,0]
]

def draw_board(board):
    for i in range(len(board)):
        if i % 3 == 0 and i != 0: #This basically means that when i is a multiple of three and isnt 0, there will be a horizontal line which seperates the board  
            print("- - - - - - - - - - - - - ") # This means that every thid row there will be a horizontal line
        for j in range(len(board[0])):
            if j % 3 ==0 and j != 0: #our next condition does the same thing as that of the one above 
                print("|", end = "") #The end equals ean that it will be on the same line rather than making a new line
            if j == 8:
                print(board[i][j]) #This prints out the final number from the board in that column
            else:
                print(str(board[i][j]) + " ", end="") #This prints out the board number and ensures they are on the same line

#This function is repsonible for finding the positions where the soduku is zero
def zero(board):
    for i in range(len(board)):
        for j in range(len(board)):
            if board[i][j] == 0:
                return (i,j)
    return None 

#This valid function will allow us to see if 
def valid(pos,num,board):
    #The three conditions
    #1 make sure that none of the columns also have the same number
    for i in range(len(board)):
        if board[pos[0]][i] == num and i != pos[1]:
            return False
#2 make sure none of the rows have the same number
    for i in range(len(board)):
        if board[i][pos[1]] == num and i != pos[0]:
            return False
        
#3 make sure that none of the sqaures have the same number
    box_x = pos[0] // 3
    box_y = pos[1] // 3
    for i in range(box_x *3 , (box_x * 3) + 3):
        for j in range(box_y * 3, (box_y*3) + 3):
            if board[i][j] == num and pos != (i,j):
                return False
    return True

#This is out aain function which uses backtracknig in order to solve the soduku puzzle whch is more efficient 
def solve(board):
    find = zero(board)
    if not find:
        return True
    else:
        pos = find 
    for i in range(1,10):
        if valid(pos,i,board):
            board[pos[0]][pos[1]] = i

            if solve(board):
                return True
            
            board[pos[0]][pos[1]] = 0

    

solve(board)
draw_board(board)
